generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String
  phoneNumber  String?
  birthday     DateTime
  password     String
  isAdmin      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  merchant     Merchant[]     @relation("MerchantBars")
  favourites   Merchant[]     @relation("UserFavourites")
  reservations Reservation[]
  reviews      Review[]
  reports      ReviewReport[]
  ReviewReply  ReviewReply[]
}

model Merchant {
  id           String           @id @default(uuid())
  name         String
  phone        String
  address      MerchantAddress?
  openHours    Json
  description  String?
  ownerId      String
  owner        User             @relation(fields: [ownerId], references: [id], name: "MerchantBars")
  bannerImage  String?
  promoImages  MerchantImage[]
  floorPlan    String?
  seats        Seat[]
  reviews      Review[]
  createdAt    DateTime         @default(now())
  favouritedBy User[]           @relation("UserFavourites")
}

model MerchantAddress {
  id          String   @id @default(uuid())
  merchantId  String
  merchant    Merchant @relation(fields: [merchantId], references: [id])
  address     String
  subDistrict String
  district    String
  province    String
  zipCode     Int

  @@unique([merchantId])
}

model MerchantImage {
  id         String   @id @default(uuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  url        String
}

model Seat {
  id           String        @id @default(uuid())
  number       Int
  location     String
  isAvailable  Boolean       @default(true)
  merchantId   String
  merchant     Merchant      @relation(fields: [merchantId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id              String            @id @default(uuid())
  userId          String?
  user            User?             @relation(fields: [userId], references: [id])
  customerName    String?
  customerPhone   String?
  reservationType ReservationType
  seatId          String
  seat            Seat              @relation(fields: [seatId], references: [id])
  startTime       DateTime
  endTime         DateTime
  numberOfGuests  Int
  numberOfTables  Int
  note            String?
  status          ReservationStatus @default(PENDING)
  createdAt       DateTime          @default(now())

  @@unique([seatId, startTime, endTime])
}

enum ReservationType {
  WALK_IN
  ONLINE
}

enum ReservationStatus {
  COMPLETED
  CANCELLED
  NO_SHOW
  PENDING
  CHECKED_IN
}

model Review {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  merchantId  String
  merchant    Merchant       @relation(fields: [merchantId], references: [id])
  rating      Int
  description String
  createdAt   DateTime       @default(now())
  replies     ReviewReply[]
  reports     ReviewReport[]
}

model ReviewReply {
  id         String   @id @default(uuid())
  reviewId   String
  review     Review   @relation(fields: [reviewId], references: [id])
  merchantId String
  merchant   User     @relation(fields: [merchantId], references: [id])
  content    String
  createdAt  DateTime @default(now())
}

model ReviewReport {
  id        String       @id @default(uuid())
  reviewId  String
  review    Review       @relation(fields: [reviewId], references: [id])
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  reason    ReportReason
  details   String?
  status    ReportStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

enum ReportReason {
  SPAM
  OFFENSIVE
  FALSE_INFORMATION
  OTHER
}

enum ReportStatus {
  PENDING
  IGNORED
  DELETED
}
